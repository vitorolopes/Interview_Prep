// https://www.freecodecamp.org/learn/coding-interview-prep/project-euler/problem-12-highly-divisible-triangular-number

// The sequence of triangle numbers is generated by adding the natural numbers. 
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
// The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
// The factors of 28 are: 1, 2, 4, 7, 14, 28
// TODO: What is the value of the first triangle number to have over n divisors?
// The 1st triangle number to have over 3 divisors is the 3th one. Its value is  6 (divisors: 1,2,3,6).
// The 1st triangle number to have over 5 divisors is the 6th one. Its value is 28 (divisors: 1,2,4,7,14,28).

//* The nth triangular number can be obtained by:
//* --> Tj = j*(j+1)/2, where n is any natural number.

function divisibleTriangleNumber(n) {
  
  let j=1
  let numberOfDivisors=0
  let Tj = 1

  while(numberOfDivisors <= n){
    Tj = j*(j+1)/2  // Calculate the jth triangular number
    console.log(Tj);
    auxFunc(Tj)
    j++
  }

  return Tj // When the while loop stops is time to return the current Tj value

  function auxFunc(Tj){
    numberOfDivisors = 0
// Calculate the number of divisors of each of the triangular numbers calculated in the while loop
    for(let i=1; i<=Math.sqrt(Tj);i++){ //* Instead of going from 1 to Tj we only need to go until Math.sqrt(Tj)
      if(Tj%i === 0){
        numberOfDivisors += 2     //* Divisors come in pairs ... 1*28=28; 2*14=28; 4*7=28 ...
      }
    }

    if(Tj%Math.sqrt(Tj) === 0){
      numberOfDivisors += 1       //* ... except for the case that the square root of the number is a divisor
    }
                                  //* This can easily be understood with the case of the number 36:
                                  //  1*36=36; 2*18=36; 3*12=36; 4*9=36 ... all divisors come in pairs ... 
                                  //  ... except if the number is divisible by its square root
                                  //                    6*6=36<=>36/6=6 an integer
                                  //  in this case the square root has not a number to be paired with
                                  // So, if a number is divisible by its square root it has an odd number of divisors
                                  // From here it can also be understood why we need only to loop untill the square root ...
                                  // all the numbers higher than the square root have a pair bellow the square root
    return numberOfDivisors
  }
}

console.log(divisibleTriangleNumber(500))